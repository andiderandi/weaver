selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (lepton_pt>20) & (lepton_pt<1000) & (lepton_eta>-2.4) & (lepton_eta<2.4) & ((label_Muon_Prompt + label_Muon_unknown +  label_Muon_fromHFHadron + label_Muon_fromLFHadron) > 0)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: awkward.JaggedArray.ones_like(PFCand_eta_rel)
   sv_mask: awkward.JaggedArray.ones_like(SV_eta_rel)
   lepton_dxy_new: lepton_dxy
   lepton_dz_new: lepton_dz
   lepton_sip3d_new: lepton_sip3d
   lepton_pt_new: lepton_pt
   lepton_eta_new: lepton_eta
preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: auto
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.01

inputs:
   pf_points:
      length: 100
      vars:
         - PFCand_eta_rel
         - PFCand_phiAtVtx_rel
   pf_features:
      length: 100
      vars:
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name,
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
      ###              multiply_by(optional, default=1),
      ###              clip_min(optional, default=-5),
      ###              clip_max(optional, default=5),
      ###              pad_value(optional, default=0)]
         - PFCand_eta_rel
         - PFCand_phiAtVtx_rel
         - PFCand_deltaR
         - PFCand_puppiWeightNoLep
         - PFCand_dzSig
         - PFCand_dxySig
         - PFCand_hcalFractionCalib
         #- PFCand_lostInnerHits
         - PFCand_pixelhits
         - PFCand_nTrackerLayers
         - PFCand_isElectron
         - PFCand_isMuon
         - PFCand_isChargedHadron
         - PFCand_fromPV
   pf_mask:
      length: 100
      vars:
         - pfcand_mask
   sv_points:
      length: 10
      vars:
         - SV_eta_rel
         - SV_phi_rel
   sv_features:
      length: 10
      vars:
         - SV_eta_rel
         - SV_phi_rel
         - SV_deltaR
         - SV_ndof
         - SV_pt_rel
         - SV_mass
         - SV_dxy
         - SV_ntracks
         - SV_d3dSig
         - SV_cospAngle

   sv_mask:
      length: 10
      vars:
         - sv_mask

   lep_features:
      length: 1
      vars:
         - lepton_dxy
         - lepton_chi2
         - lepton_dxyError
         - lepton_dxySig
         - lepton_dz
         - lepton_dzError
         - lepton_dzSig
         - lepton_e_ECAL
         - lepton_e_HCAL
         - lepton_hit
         - lepton_hoe
         - lepton_ip3d
         - lepton_jetbtag
         - lepton_jetPtRelv2
         - lepton_lostHits
         - lepton_ndof
         - lepton_nTrackerLayers
         - lepton_pixhit
         - lepton_posmatch
         - lepton_segmentComp
         - lepton_sip3d
         - lepton_jetRelIso
         - lepton_jetNDauCharged
         - lepton_minisoch
         - lepton_minisonh
         - lepton_jetPtRelv2_abs
         - lepton_jetPtRatio
         - lepton_pfRelIso03_drcor
         #- lepton_pt_new
         #- lepton_eta_new

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [
      label_Muon_Prompt, label_Muon_fromHFHadron, label_Muon_fromLFHadron, label_Muon_unknown] #, label_Muon_fromTau, label_Muon_fromPhoton
      #]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value:
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass)

observers:
   - nPFCand
   - lepton_pt
   - lepton_eta
   - lepton_phi
   - PV_npvsGood
   - lepton_minisoall
   - lepton_isMedium
   - lepton_isLoose
   - lepton_sip3d_new
   - lepton_dz_new
   - lepton_dxy_new
weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      lepton_pt: [20, 30, 50, 75, 100, 150, 200, 500, 1000]
      lepton_eta: [-2.4, -1.4, 0, 1.4, 2.4]
   reweight_classes: [label_Muon_Prompt, label_Muon_fromHFHadron, label_Muon_fromLFHadron, label_Muon_unknown] #, label_Muon_fromTau, label_Muon_fromPhoton]
   class_weights: [1, 1, 1, 1] #, 1, 1]
   reweight_hists:
